from datetime import datetime
import time
from aiogram import Bot
from asyncpg.pgproto.pgproto import timedelta

from bot.utils import get_all_users
from database.models import User, Weekday
from bot.services import get_weather_recommendation_message
import logging


async def send_scheduled_notification(bot: Bot, user: User) -> bool:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
    """
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if not user.user_settings:
            return False

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω—ã –ª–∏ –≤–æ–æ–±—â–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        if not user.user_settings.notifications_enabled:
            return False

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏
        current_weekday = Weekday(datetime.now().weekday())

        # –ò—â–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
        today_schedule = None
        for schedule in user.user_schedules:
            if schedule.day_of_week == current_weekday:
                today_schedule = schedule
                break

        # –ï—Å–ª–∏ –Ω–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –∏–ª–∏ –æ—Ç–∫–ª—é—á–µ–Ω–æ
        if not today_schedule or not today_schedule.is_enabled:
            return False

        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø–æ–≥–æ–¥–µ
        message_text = await get_weather_recommendation_message(
            user.user_settings.city)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await bot.send_message(
            chat_id=user.id,
            text=message_text,
            parse_mode="HTML"
        )

        return True

    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é "
                      f"{user.id}: {e}")
        return False


async def should_send_notification_now(user: User) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å
    """
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—ã–µ —É—Å–ª–æ–≤–∏—è
        if not user.user_settings or not user.user_settings.notifications_enabled:
            return False

        # –¢–µ–∫—É—â–∏–π –¥–µ–Ω—å –∏ –≤—Ä–µ–º—è
        now_utc = datetime.utcnow()  # –ë–µ—Ä—ë–º –≤—Ä–µ–º—è UTC
        current_weekday = Weekday(now_utc.weekday())

        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–º–µ—â–µ–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "UTC+3" -> 3)
        timezone_offset = int(user.user_settings.timezone.split("+")[1])

        # –ü—Ä–∏–±–∞–≤–ª—è–µ–º —Å–º–µ—â–µ–Ω–∏–µ –∫ UTC
        user_local_time = now_utc + timedelta(hours=timezone_offset)
        current_time = user_local_time.time().replace(second=0, microsecond=0)

        # –ò—â–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
        for schedule in user.user_schedules:
            logging.info(schedule.notification_time)
            if (schedule.day_of_week == current_weekday and
                    schedule.is_enabled and
                    schedule.notification_time == current_time):
                logging.info("true")
                return True

        return False

    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
        return False


# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ
async def check_and_send_notifications(bot: Bot):
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    """
    users = await get_all_users()  # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    sent_count = 0
    for i, user in enumerate(users):
        logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {i}")
        if i % 20 == 0:
            time.sleep(1)
        if await should_send_notification_now(user):
            if await send_scheduled_notification(bot, user):
                sent_count += 1

    logging.info(f"üì® –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {sent_count}")
    return sent_count
